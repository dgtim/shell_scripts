#!/bin/bash

# initiate the Dell firmware updates from the admin node
# limits the number of processes to NP
# Dependencies: cURL, shosts, pdcp

# Note: for the expanding a string like node[2-4,7],gpu6 to
# a list of 'node2 node3 node4 node7 gpu6 ...' we use 'shosts'
# from this the same git repo


# Copyright (C) 2025 ivan.tervanto /at/ aalto.fi
# Released under the GNU General Public License

# catching signals to make sure the clean exit
trap 'killall $(jobs -p) 2>/dev/null; exit 1' 1 2 3 6

# help function
usage() {
  (($#)) && echo -e "\nError: $@"
  echo
  echo "Usage: ${0##*/} [options] nodelist"
  echo '        nodelist is a comma-separated list with a prefixNN naming convention'
  echo '          in the general form: prefix[n-m,l-k,...]i; example: node[2-4,7],gpu6'
  echo '       -n #, number of processes to run concurrently (default 4)'
  echo '       -t #, timeout in seconds between running jobs checks (default 10s)'
  echo '       -v, verbose mode'
  echo '       -h, this help message'
  echo
  exit 1
}

VERBOSE=':'

# getopt handles input agrs
opts=$(getopt "vhn:t:" "$@") || usage
set -- $opts

# extract the options first
while true; do
  case ${1} in
    -h) usage ;;
    -v) unset VERBOSE ;;
    -t) shift; TIMEOUT=$1 ;;
    -n) shift; NP=$1 ;;
    --) shift; break ;;
  esac
  shift
done

# by now, we should have left the node list only
if (($#==1)); then
  NODES=$1
else
  usage "Incorrect node list $@"
fi

# define default vars
BOOTSTRAP_URL='https://linux.dell.com/repo/hardware/dsu/bootstrap.cgi'
BOOTSTRAP_FILE=${BOOTSTRAP_URL##*/}  # extract the file name from the URL
: ${NP:=4}  # number of the simultaneous remote processes/copies
: ${TIMEOUT:=10}  # timeout for the sleep, see rundsu()
DSUTEMP='/root/.dsu'  # the action dir
RD='/root'  # a directory on the remote node
RUNDSU='rundsu' # temporary script for the remote execution

# all the local preparations / logs in this folder
[[ -d $DSUTEMP ]] || mkdir $DSUTEMP
cd $DSUTEMP

$VERBOSE echo NP: $NP
$VERBOSE echo TIMEOUT: $TIMEOUT
$VERBOSE echo bootstrap file: $DSUTEMP/$BOOTSTRAP_FILE

# get the dell's bootstrap file
echo "...Downloading $BOOTSTRAP_FILE file" 
if ! curl -f -s -O $BOOTSTRAP_URL; then
  usage "Can't download  $BOOTSTRAP_URL"
fi

# fix that GPG thing; make it "non-interactive"
sed -i 's/IMPORT_GPG_CONFIRMATION="na"/IMPORT_GPG_CONFIRMATION="yes"/' $BOOTSTRAP_FILE

# a string like node[2-4,7],gpu6 to a list 'node2 node3 node4 node7 gpu6 ...'
NODELIST=$(shosts $NODES)
$VERBOSE echo NODELIST: $NODELIST
pdcp_cmd="pdcp -f $NP -b -w $NODES"
$VERBOSE echo pdcp command: $pdcp_cmd ...
dsu_cmd='dsu -n --import-public-key' # add --reboot, if needed
$VERBOSE echo DSU command: $dsu_cmd


## the action starts here

# copy the bootstrap file over the nodes
echo "...Copying $BOOTSTRAP_FILE to:  $NODELIST"
$pdcp_cmd $BOOTSTRAP_FILE $RD/$BOOTSTRAP_FILE

# making a temp executable and run it on the $NODES
echo "...Creating and copying 'rundsu' to:  $NODELIST"
cat <<EOF > $RUNDSU
# $(date -R)
echo '#### RUNNING' $RD/$BOOTSTRAP_FILE 
bash $RD/$BOOTSTRAP_FILE 
echo '#### UPDATING dell-system-update'
yum -y install dell-system-update
echo '#### RUNNING' $dsu_cmd
$dsu_cmd
EOF
$pdcp_cmd $RUNDSU $RD/$RUNDSU


# the function that does the actual run
rundsu() { 
  local NODE=$1 SSHST HELPURL

  echo $NODE: Started at $(date -R)

  ssh -o ConnectTimeout=12 $NODE "bash $RD/$RUNDSU"  # actual run
  SSHST=$?  # status of the SSH command (== the latest executed command)
  $VERBOSE echo SSH exit code for $NODE: $SSHST

  # exit codes for the DSU
  HELPURL='https://www.dell.com/support/manuals/en-us/system-update/dsu_ug_1.8_revamp/dsu-return-codes?guid=guid-a413b447-0dd2-45fb-a60c-7a472e353e30'

  case $SSHST in
    8)
      # '8' stands for the 'Please restart the system for ...'
      echo $NODE: DSU run is over, draining for the reboot
      scontrol update nodename=$NODE state=drain reason=reboot
    ;;
    0)
      echo $NODE: DSU run is over, no reboot is required
      echo $n: Resume the node if needed
      #scontrol update nodename=$NODE state=resume
    ;;
    *)
      echo $NODE: unknown exit code: $SSHST 
      echo see $HELPURL
  esac
  echo $NODE: Finished at $(date -R)
}

# going through the NODELIST
for n in $NODELIST; do

  # checking how many jobs we have currently running
  cnp=$(jobs | wc -l)

  # if $cnp is greater or equal to $NP: sleep
  while (( $cnp >= $NP )); do
    sleep $TIMEOUT # timeout between checking the jobs number
    # set counter to a number of jobs running currently
    cnp=$(jobs | wc -l)
  done # while

  # proceed when the number of jobs is less than $NP
  echo $n: 'DSU run started:' $(date +"%H:%M %d-%m-%Y")
  LOG="$DSUTEMP/$n.$(date +"%d-%m-%Y").log"
  echo $n: 'Check log file for the status: ' $LOG
  # collect log info to a dedicated log per node; send job to a background
  { rundsu $n > $LOG;
    echo $n: 'DSU run finished:' $(date +"%H:%M %d-%m-%Y"); } &

done # for

echo '...Wating till the job(s) are done'
# to monitor the results, example:
# tail -n 0 -F /root/.dsu/csl{5..9}.*.log
wait
