#!/bin/bash

# list statistics of file types for the given directory
# pure BASH script, no other external commands except 'file'

# orginally a special assignment for the Shell Scripting course:
#
#Write two versions of script that counts how many files there
#are of each type in a given directory. Use 'file -b'.
#Script should accept a directory name. Output should look like:
#
# $ ./script path/to/directory/name
#  5 gzip compressed data
#  20 directory
#  3 Bourne-Again shell script
#  11 ASCII text
#  3 empty
#  1 UTF-8 Unicode text
#  1 FORTRAN program
#
#One version may use whatever Linux tools you find, but the other
# one can use only BASH built-in functionality. The only
# exception is the 'file' utility itself.


DIR=${1:?Usage $(basename $0) directory}
declare -iA arr

# process substitution is used, otherwise pipelines run in the
# subshell and arr remains empty
# read 'file -b ...' line by line
while read line; do

  # get up to first comma
  item="${line%%,*}"

  # go through available array elements, and if file type is new
  # add it to the array, if not new increments its element value
  for i in "${!arr[@]}"; do
    if [[ $i == $item ]]; then
      ((arr[$item]++))
      continue 2
    fi
  done
  arr[$item]=1
done < <(file -b $DIR/*)
# see other implentation with 'for loop' without process substitution

# print array out
for j in "${!arr[@]}"; do
  echo "${arr[$j]} $j"
done


### the other version, a oneliner

# the purpose is to demonstrate that BASH is mainly about getting
# availbale Linux utilities to work together

DIR=${1:?Usage $(basename $0) directory}

file -b ${DIR}/* | sort | uniq -c | sort -rn

# file -b ${DIR}/*  -- outputs all items at once
# sort              -- sort them for the first time
# uniq              -- counts unique items
# sort -rn          -- final numeric sort recursivel
